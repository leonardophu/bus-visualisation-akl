# Sequential timestamps to extract
per_timestamp = ceiling(abs(diff(time_range)) / total_frames)
# Whole numbers don't account for the end
if (per_timestamp %% 1 == 0) {
steps = seq(time_range[1], time_range[2], per_timestamp)
} else {
# add final frame which is the end of the day
steps = c(seq(time_range[1], time_range[2], per_timestamp), time_range[2])
}
return(steps)
}
source('step_generator.R')
View(step_generator)
step_generator()
source('step_generator_csv.R')
step_generator()
time_range
per_timestamp
time_range = range(intData$timestamps)
total_frames = fps * seconds
fps = 1, seconds = 60
fps = 1
seconds = 60
time_range = range(intData$timestamps)
total_frames = fps * seconds
total_frames
time_range
abs(diff(time_range)) / total_frames
ceiling(abs(diff(time_range)) / total_frames)
per_timestamp %% 1 == 0
per_timestamp = ceiling(abs(diff(time_range)) / total_frames)
per_timestamp %% 1 == 0
2.5 %% 1 == 0
1199.983 %% 1 == 0
per_timestamp %% 1 == 0
per_timestamp
total_frames = fps * seconds
# Sequential timestamps to extract
per_timestamp = ceiling(abs(diff(time_range)) / total_frames)
per_timestamp
abs(diff(time_range)) / total_frames
25.0 %% 1 == 0
step_generator = function(fps = 1, seconds = 60) {
time_range = range(intData$timestamps)
total_frames = fps * seconds
# Sequential timestamps to extract
per_timestamp = abs(diff(time_range)) / total_frames
# Whole numbers don't account for the end
if (per_timestamp %% 1 == 0) {
steps = seq(time_range[1], time_range[2], per_timestamp)
} else {
# add final frame which is the end of the day
#Round the per timestamp up and include the last point
per_timestamp = ceiling(per_timestamp)
steps = c(seq(time_range[1], time_range[2], per_timestamp), time_range[2])
}
return(steps)
}
step_generator = function(fps = 1, seconds = 60) {
time_range = range(intData$timestamps)
total_frames = fps * seconds
# Sequential timestamps to extract
per_timestamp = abs(diff(time_range)) / total_frames
# Whole numbers don't account for the end
if (per_timestamp %% 1 == 0) {
steps = seq(time_range[1], time_range[2], per_timestamp)
} else {
# add final frame which is the end of the day
#Round the per timestamp up and include the last point
per_timestamp = ceiling(per_timestamp)
steps = c(seq(time_range[1], time_range[2], per_timestamp), time_range[2])
}
return(steps)
}
step_generator()
intData
class(intData)
intData[intData$timestamps == timestamp,]
intData$timestamps
intData$timestamps == timestamp
intData %>% filter(timestamps == tiemstamp)
timestamp = 1199.983 %% 1 == 0
intData[intData$timestamps == timestamp,]
timestamp = 1683263818
intData[intData$timestamps == timestamp,]
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$longitude[i],
lat = busses$latitude[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
}
library(leaflet)
library(mapview)
library(parallel)
library(magick)
library(foreach)
library(doParallel)
library(data.table)
data_path = "../extraction/R_interpolation/"
intData = fread(paste0(data_path, 'interpolated_data.csv'))
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production.R')
# Initalise to do parallelisatoin
numCores <- detectCores()
cl <- makeCluster(numCores)
registerDoParallel(cl)
# Allow cluster to make their frames
clusterExport(cl, "frame_generator")
system.time(createMap(20, 60))
?mclapply()
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$longitude[i],
lat = busses$latitude[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
return(True)
}
?mclapply
createMap = function(fps, seconds, cores_num) {
# Clearing the images folder
files_to_remove <- list.files(path = "images/", pattern = "m*.png", full.names = TRUE)
if (length(files_to_remove) > 0) {
file.remove(files_to_remove)
}
# Creating the image
steps = step_generator(fps, seconds)
numCores = detectCores()
done = mclapply(steps, frame_generator, mc.cores = numCores)
}
runMap = function(loop = 0, fps = 20) {
img <- image_read(list.files(path = "images/", pattern="m*.png", full.names = TRUE))
animation = image_animate(img, loop = loop, optimize = TRUE, fps = fps)
image_write(animation, "images/animation.gif")
animation
}
createMap()
createMap = function(fps = 1, seconds = 60, numCores = NA) {
# Clearing the images folder
files_to_remove <- list.files(path = "images/", pattern = "m*.png", full.names = TRUE)
if (length(files_to_remove) > 0) {
file.remove(files_to_remove)
}
# Creating the image
steps = step_generator(fps, seconds)
if (is.na(numCores)) {
numCores = detectCores()
}
done = mclapply(steps, frame_generator, mc.cores = numCores)
}
runMap = function(loop = 0, fps = 20) {
img <- image_read(list.files(path = "images/", pattern="m*.png", full.names = TRUE))
animation = image_animate(img, loop = loop, optimize = TRUE, fps = fps)
image_write(animation, "images/animation.gif")
animation
}
library(leaflet)
library(mapview)
library(parallel)
library(magick)
library(foreach)
library(doParallel)
library(data.table)
data_path = "../extraction/R_interpolation/"
intData = fread(paste0(data_path, 'interpolated_data.csv'))
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production_csv.R')
createMap()
frame_generator()
frame_generator()
frame_generator
intData$timestamps[1212,]
intData$timestamps[123,]
intData$timestamps
frame_generator(1683263807)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
View(busses)
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$longitude[i],
lat = busses$latitude[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
return(True)
}
frame_generator(1683263807)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
View(busses)
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
return(True)
}
frame_generator(1683263807)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
View(busses)
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
return(TRUE)
m
}
frame_generator(1683263807)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
View(busses)
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
m
return(TRUE)
}
frame_generator(1683263807)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.05) # delay to ensure all tiles are loaded
print(m)
return(TRUE)
}
frame_generator(1683263807)
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production_csv.R')
createMap()
runMap()
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production_csv.R')
createMap(20, 60)
runMap()
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 0.2) # delay to ensure all tiles are loaded
return(TRUE)
}
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production_csv.R')
system.time(createMap(20, 60))
runMap()
?mapshot
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 1) # delay to ensure all tiles are loaded
return(TRUE)
}
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production_csv.R')
system.time(createMap(20, 60))
system.time(runMap())
file_names <- list.files(path = "images/", pattern = "m*.png", full.names = TRUE)
file_names
file_names <- list.files(path = "images/", pattern = "m*.png", full.names = TRUE)
file_names <- sort(file_names)
file_names
runMap = function(loop = 0, fps = 20) {
file_names <- list.files(path = "images/", pattern = "m*.png", full.names = TRUE)
file_names <- sort(file_names)
img <- image_read(file_names)
animation = image_animate(img, loop = loop, optimize = TRUE, fps = fps)
image_write(animation, "images/animation.gif")
animation
}
system.time(runMap())
intData$timestamps[23,]
intData$timestamps
frame_generator(1683263788)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m <- m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 1) # delay to ensure all tiles are loaded
print(m)
return(TRUE)
}
frame_generator(1683263788)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m = m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
m <- m %>% addControl(
html = paste("Timestamp:", timestamp),
position = "topright"
)
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 1) # delay to ensure all tiles are loaded
print(m)
return(TRUE)
}
frame_generator(1683263788)
posix_time = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC")
time_display <- format(posix_time, format = "%H:%M")
time_display
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
posix_time = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC")
time_display <- format(posix_time, format = "%H:%M")
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m = m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
m <- m %>% addControl(
html = paste("Timestamp:", time_display),
position = "topright"
)
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 1) # delay to ensure all tiles are loaded
print(m)
return(TRUE)
}
time_display
frame_generator(1683263788)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
posix_time = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC")
time_display <- format(posix_time, format = "%H:%M")
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m = m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
m <- m %>% addControl(
html = paste("Time:", time_display),
position = "topright"
)
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 1) # delay to ensure all tiles are loaded
print(m)
return(TRUE)
}
frame_generator(1683263788)
frame_generator = function(timestamp) {
colours = c('grey', 'blue', 'orange', 'red')
posix_time = as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC")
time_display <- format(posix_time, format = "%H:%M")
busses = intData[intData$timestamps == timestamp,]
m <- leaflet() %>%
addTiles() %>%
setView(lng=174.768, lat=-36.852, zoom = 10)
for (i in 1 :nrow(busses)) {
m = m %>% addCircleMarkers(lng = busses$lon[i],
lat = busses$lat[i],
radius = 2,  # adjust the radius as you like
color = colours[busses$status[i] + 1],  # adjust the color as you like
fillOpacity = 0.8)
}
m <- m %>% addControl(
html = paste("Time:", time_display),
position = "topright"
)
mapshot(m, file = paste0("images/m", timestamp, ".png"), delay = 1) # delay to ensure all tiles are loaded
return(TRUE)
}
data_path = "../extraction/R_interpolation/"
intData = fread(paste0(data_path, 'interpolated_data.csv'))
source('step_generator_csv.R')
source('frame_generator_csv.R')
source('map_production_csv.R')
system.time(createMap(20, 60))
system.time(runMap())
step_generator(20, 60)
as.POSIXct(step_generator(20,60), origin = "1970-01-01", tz = "UTC")
View(as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC"))
as.POSIXct(step_generator(20,60), origin = "1970-01-01", tz = "UTC")
length(as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC"))
(as.POSIXct(timestamp, origin = "1970-01-01", tz = "UTC")
)
class(step_generator())
step_generator()
length(step_generator())
length(step_generator(20,60))
range(length(step_generator(20,60)))
range(step_generator(20,60))
as.POSIXct(range(step_generator(20,60)), origin = "1970-01-01", tz = "UTC")
step_generator(20,60)
as.POSIXct(step_generator(20,60), origin = "1970-01-01", tz = "UTC")
time_range = range(intData$timestamps)
per_timestamp = abs(diff(time_range)) / 60
per_timestamp
seq(0, 10, 2)
intData
intData$timestamps
seq(range(intData$timestamps))
seq(range(intData$timestamps))
intData
seq(range(intData$timestamps))
range(intData$timestamps)
seq(min(intData$timestamps), max(intData$timestamps), 1)
seq(min(intData$timestamps), max(intData$timestamps), 1)
x = seq(min(intData$timestamps), max(intData$timestamps), 1)
all(x %in% intData$timestamps)
len(x)
length(x)
file_names <- list.files(path = "images/", pattern = "m*.png", full.names = TRUE)
length(file_names)
