n(x$trip_update$trip$route_id),
n(x$trip_update$stop_time_update$stop_id),
n(x$trip_update$trip$schedule_relationship),
n(x$trip_update$delay),
n(x$trip_update$stop_time_update$stop_sequence),
n(x$trip_update$stop_time_update$arrival$time),
n(x$trip_update$stop_time_update$arrival$delay),
n(x$trip_update$stop_time_update$departure$time),
n(x$trip_update$stop_time_update$departure$delay)
))))
colnames(trip_data) = c("trip_id",
"direction_id",
"route_id",
"stop_id",
"schedule_relationship",
"delay",
"stop_sequence",
"act_arrival_time",
"arrival_delay",
"act_departure_time",
"act_departure_delay")
#Converting our types to be able to join
trip_data$stop_sequence = as.integer(trip_data$stop_sequence)
trip_data = trip_data %>% mutate(stop_code = as.integer(substring(stop_id, 1, regexpr("-", stop_id)[1] - 1)))
#Cancelled buses
alerts <- tryCatch(
GET('https://api.at.govt.nz/realtime/legacy/servicealerts',
accept_json(),
add_headers('Ocp-Apim-Subscription-Key' = key)),
error=function(e) NULL)
#Now alerts are different
alert_contents = content(alerts)
alert_data = as.data.frame(do.call(rbind, lapply(alert_contents[[2]][[2]], function(x) c(x$id, x$alert$effect, x$alert$header_text$translation[[1]]$text, x$alert$informed_entity[[1]]$trip$trip_id))))
colnames(alert_data) = c("id", "effect", "text", "trip_id")
alert_temp1 = alert_data
alert_temp1$trip_id = ifelse(alert_temp1$trip_id == alert_temp1$id, NA, alert_temp1$trip_id)
cancelled_buses = alert_temp1 %>% filter(is.na(trip_id) == FALSE) %>% select(trip_id) %>% mutate(cancelled = TRUE)
#Getting our full dataset by joining
df = trip_data %>%
left_join(stop_times %>% select("trip_id", "stop_sequence", "arrival_time", "departure_time"),
by = c("trip_id" = "trip_id", "stop_sequence" = "stop_sequence")) %>%
left_join(stops %>% select("stop_id", "stop_lat", "stop_lon"),
by = c("stop_id" = "stop_id")) %>%
left_join(routes %>% select("route_id", "route_short_name"),
by = c("route_id" = "route_id")) %>%
left_join(cancelled_buses,
by = c("trip_id" = "trip_id"))
df = df[order(df$trip_id, df$direction_id, df$stop_sequence, df$arrival_time),]
df
#Since these times are in total seconds from Jan 1970, we need to convert them to hours for a given day
class(df$act_arrival_time) = c('POSIXt','POSIXct')
class(df$act_departure_time) = c('POSIXt','POSIXct')
df$act_arrival_time
df$act_arrival_time_in_seconds <- as.numeric(df$act_arrival_time)
df$act_arrival_time_in_seconds
df
c(10173376 - 9836781, 107314, - 336606, 3946703 - 3219541)
c(10173376 - 9836781, 107314 - 336606, 3946703 - 3219541)
c(10173376 - 9836781, 107314 - 336606, 3946703 - 3219541, 3946703 + 107314 + 10173376 - (3219541 + 336606 + 9836781))
c(10173376 - 9836781, 107314 - 336606, 3946703 - 3219541, total_change = 3946703 + 107314 + 10173376 - (3219541 + 336606 + 9836781))
c(Uber Change = 10173376 - 9836781, 107314 - 336606, 3946703 - 3219541, total_change = 3946703 + 107314 + 10173376 - (3219541 + 336606 + 9836781))
c(Uber = 10173376 - 9836781, Via = 107314 - 336606, Lyft = 3946703 - 3219541, Total = 3946703 + 107314 + 10173376 - (3219541 + 336606 + 9836781))
35359/3600
2 * 3600
1000/3600
1000/60
177/60
5623 / 3600
10^1 - 1
10 ^ 1.5
for(i in c(1,2)) {
print(i)
}
for(i in c(1,2)) {
print(i)
}
2.794e+01
1.440e+00
first = TRUE
i = 0
if (first) {
first = FALSE
i = i + 5
} else {
i = i + 1
}
first = TRUE
i = 0
if (first) {
first = FALSE
i = i + 5
} else {
i = i + 1
}
print(i)
10 ^ 0.8
library(xml2)
?xml_text
data.frame(x = 1, y = c(1,2), z = c(1,2,3,4))
system.time(print("hello world"))
x = function() {
t = seq(1, 100000)
lapply(t, FUN = function(y) {
y = y^3
})
}
system.time(x)
x
x
x = function() {
t = seq(1, 100000)
print(t)
lapply(t, FUN = function(y) {
y = y^3
})
}
x
system.time(x())
?system.time
library(parallel)
detectCores()
?lapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, mean)
mclapply(X, mean, mc.cores = 3)
mclapply(x, mean, mc.cores = 3)
x1 = function() {
lapply(x, mean)
}
x2 = function() {
mclapply(x, mean, mc.cores = 3)
}
system.time(x1)
system.time(x1())
x1()
x
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE), c = seq(1, 100), f = seq(1, 100000))
system.time(x1())
system.time(x2())
x2
16 * 0.219
35 + 79
79/114
35/39
6.922 + 1.053 * 40
(79)/ (79 + 35)
35/ 39
79 / (35 + 79)
35 / (35 + 79)
df1 <- data.frame(ID = 1:3, Value = c(10, 20, 30))
df2 <- data.frame(ID = 4:6, Value = c(40, 50, 60))
df3 <- data.frame(ID = 7:9, Value = c(70, 80, 90))
# Create a list of dataframes
list_of_dfs <- list(df1, df2, df3)
list_of_dfs
do.call(rbind, list_of_dfs)
?sapply
list_of_dfs
random = function(x) {
sum(x$Value)
}
sapply(list_of_dfs, random)
tapply(list_of_dfs, random)
lapply(list_of_dfs, random)
do.call(rbind, lapply(list_of_dfs, random))
class(do.call(rbind, lapply(list_of_dfs, random)))
as.integer(3.2)
as.double(3.2)
x = c(1,2,3)
x
names(x) = c("1", "2", "3")
x
problem_equal
source('businfoextraction.R')
setwd("~/Desktop/bus-visualisation-akl/NodeJS/TESTINGdatabase/extraction")
source('businfoextraction.R')
t = full_bus_data
# We have complete cases
any(rowSums(is.na(full_bus_data)) == length(colnames(full_bus_data)))
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
# Get the cancelled buses
cancelled_bus = full_bus_data[full_bus_data$cancelled == TRUE, ]
# Get the unqiue IDS
ids = unique(cancelled_bus$trip_id)
cancelled_trips = trips[trips$trip_id %in% ids,]
cancelled_trips = cancelled_trips %>% select(route_id, trip_id, shape_id)
cancelled_trips = left_join(cancelled_trips, stop_times %>% select(trip_id, departure_time, stop_sequence, stop_id), by = c("trip_id"))
cancelled_trips = left_join(cancelled_trips, stops %>% select(stop_id, stop_lat, stop_lon), by = c("stop_id"))
cancelled_trips = left_join(cancelled_trips, routes %>% select(route_id, route_short_name), by = c("route_id"))
# Subsetted trips
cancelled_trips = subset(cancelled_trips, departure_time < "24:00:00")
# Converting the timestamps into seconds
# Paste the required date
cancelled_trips$timestamps = paste(date_,cancelled_trips$departure_time)
# Convert the time to UTC
cancelled_trips$timestamps = ymd_hms(cancelled_trips$timestamps, tz = "UTC")
cancelled_trips$timestamps = as.numeric(cancelled_trips$timestamps)
# Then add 12 hours since for some reason it's 12 hours behind
cancelled_trips$timestamps = cancelled_trips$timestamps  + 12*3600
# Now dealing with the non cancelled trips
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
arrival_bus = subset(full_bus_data, day == our_day)
arrival_bus = arrival_bus[arrival_bus$cancelled == FALSE, ]
# Remove duplicates that have same group and arrival date
arrival_bus <- arrival_bus %>%
group_by(trip_id, stop_sequence) %>%
filter(act_arrival_time_date == max(act_arrival_time_date)) %>%
ungroup()
# Get only buses that are after 4 am
arrival_bus = subset(arrival_bus, as.numeric(format(act_arrival_time_date, "%H")) >= 4)
# Want to group our observations by the actual arrival time and the trip_id
arrival_bus = arrival_bus %>%
group_by(trip_id) %>%
arrange(trip_id, act_arrival_time) %>%
mutate(diff_stop_sequence = stop_sequence - lag(stop_sequence))
# There are cases when the difference in stop_sequence is 0. If this is the case we have problems
any(arrival_bus$diff_stop_sequence <= 0)
getLessData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data < 0) return(TRUE)
else return(FALSE)
}
}
getEqualData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data == 0) return(TRUE)
else return(FALSE)
}
}
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
# Clean the problem dataset
cleaned_problem = subset(problem_data, delay > - 1700 & delay < 3200)
cleaned_problem = subset(problem_data, )
# Get the problem data when there are sequences that are the same
problem_equal = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]
# Check for anamoly
unique(subset(problem_equal, delay > 3000)$trip_id)
problem_equal
hist(problem_equal$delay)
# Check for anamolies
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[2])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[3])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[4])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[5])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[4])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[2])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[3])
View(subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[4]))
any(is.na(arrival_bus$diff_stop_sequence))
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[3])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[2])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
?lag
lag(1:5)
unique(subset(problem_equal, delay < -1000)$trip_id)[1]
subset(arrival_bus, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
View(subset(arrival_bus, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1]))
cleaned_problem
subset(arrival_bus, trip_id == unique(cleaned_problem$trip_id)[1])
subset(arrival_bus, trip_id == unique(cleaned_problem$trip_id)[2])
subset(arrival_bus, trip_id == unique(cleaned_problem$trip_id)[3])
subset(arrival_bus, trip_id == unique(cleaned_problem$trip_id)[4])
problem_id
problem_set = subset(arrival_bus, trip_id %in% problem_id)
problem_set
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
cleaned_problem
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[4])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[1])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[2])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[3])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[4])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[5])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[6])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[7])
# Remove observations which are after another one.
subset(cleaned_problem, diff_stop_sequence >= 0)
cleaned_problem
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[1])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[2])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[3])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[4])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[7])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[8])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[9])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[10])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[11])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[12])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[13])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[14])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[15])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[156)
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[16])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[17])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[18])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[19])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[191)
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[1])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[2])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[3])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[4])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[5])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[6])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[6])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[7])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[8])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[9])
#cleaned_problem = subset(problem_data, )
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[10])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[11])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[12])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[13])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[14])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[15])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[16])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[17])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[18])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[19])
cleaned_problem = subset(cleaned_problem, diff_stop_sequence >= 0)
cleaned_problem
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[1])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[2])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[3])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[4])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[5])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[6])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[7])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[8])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[9])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[10])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[11])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[12])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[13])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[13])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[14])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[15])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[16])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[17])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[18])
subset(cleaned_problem, trip_id == unique(cleaned_problem$trip_id)[19])
cleaned_problem
problem_equal
problem_equal = pe %>% select(trip_id, diff_stop_sequence, act_arrival_time_date)
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]
problem_equal = pe %>% select(trip_id, diff_stop_sequence, act_arrival_time_date)
problem_equal
pe
problem_equal = pe %>% select(trip_id, diff_stop_sequence, act_arrival_time_date, route_id, delay, stop_sequence)
problem_equal
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
sapply(arrival_bus$diff_stop_sequence, getEqualData)
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]
pe
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
pe
problem_equal = arrival_bus[trip_id %in% pe, ]
problem_equal = subset(arrival_bus, trip_id %in% pe)
problem_equal
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(arrival_bus, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[1])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[2])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[3])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[4])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[5])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[6])
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, stop_sequence, act_arrival_time_date, diff_stop_sequence)
problem_equal
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[6])
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[6])
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[7])
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[9])
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[10])
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[11])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[12])
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[13])
subset(problem_equal, trip_id == unique(trip_id)[1])
subset(problem_equal, trip_id == unique(trip_id)[2])
subset(problem_equal, trip_id == unique(trip_id)[3])
subset(problem_equal, trip_id == unique(trip_id)[4])
subset(problem_equal, trip_id == unique(trip_id)[5])
subset(problem_equal, trip_id == unique(trip_id)[6])
subset(problem_equal, trip_id == unique(trip_id)[7])
subset(problem_equal, trip_id == unique(trip_id)[8])
subset(problem_equal, trip_id == unique(trip_id)[9])
subset(problem_equal, trip_id == unique(trip_id)[9])
subset(problem_equal, trip_id == unique(trip_id)[10])
subset(problem_equal, trip_id == unique(trip_id)[11])
subset(problem_equal, trip_id == unique(trip_id)[12])
subset(problem_equal, trip_id == unique(trip_id)[13])
subset(problem_equal, trip_id == unique(trip_id)[14])
subset(problem_equal, trip_id == unique(trip_id)[15])
subset(problem_equal, trip_id == unique(trip_id)[16])
subset(problem_equal, trip_id == unique(trip_id)[17])
subset(problem_equal, trip_id == unique(trip_id)[18])
subset(problem_equal, trip_id == unique(trip_id)[19])
subset(problem_equal, trip_id == unique(trip_id)[20])
