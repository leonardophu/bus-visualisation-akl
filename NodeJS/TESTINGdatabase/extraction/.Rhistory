cleaned_problem = subset(cleaned_problem, diff_stop_sequence >= 0)
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[13])
subset(problem_equal, trip_id == unique(trip_id)[20])
source('businfoextraction.R')
t = full_bus_data
# We have complete cases
any(rowSums(is.na(full_bus_data)) == length(colnames(full_bus_data)))
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
# Get the cancelled buses
cancelled_bus = full_bus_data[full_bus_data$cancelled == TRUE, ]
# Get the unqiue IDS
ids = unique(cancelled_bus$trip_id)
cancelled_trips = trips[trips$trip_id %in% ids,]
cancelled_trips = cancelled_trips %>% select(route_id, trip_id, shape_id)
cancelled_trips = left_join(cancelled_trips, stop_times %>% select(trip_id, departure_time, stop_sequence, stop_id), by = c("trip_id"))
cancelled_trips = left_join(cancelled_trips, stops %>% select(stop_id, stop_lat, stop_lon), by = c("stop_id"))
cancelled_trips = left_join(cancelled_trips, routes %>% select(route_id, route_short_name), by = c("route_id"))
# Subsetted trips
cancelled_trips = subset(cancelled_trips, departure_time < "24:00:00")
# Converting the timestamps into seconds
# Paste the required date
cancelled_trips$timestamps = paste(date_,cancelled_trips$departure_time)
# Convert the time to UTC
cancelled_trips$timestamps = ymd_hms(cancelled_trips$timestamps, tz = "UTC")
cancelled_trips$timestamps = as.numeric(cancelled_trips$timestamps)
# Then add 12 hours since for some reason it's 12 hours behind
cancelled_trips$timestamps = cancelled_trips$timestamps  + 12*3600
# Now dealing with the non cancelled trips
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
arrival_bus = subset(full_bus_data, day == our_day)
arrival_bus = arrival_bus[arrival_bus$cancelled == FALSE, ]
# Remove duplicates that have same group and arrival date
arrival_bus <- arrival_bus %>%
group_by(trip_id, stop_sequence) %>%
filter(act_arrival_time_date == max(act_arrival_time_date)) %>%
ungroup()
# Get only buses that are after 4 am
arrival_bus = subset(arrival_bus, as.numeric(format(act_arrival_time_date, "%H")) >= 4)
# Want to group our observations by the actual arrival time and the trip_id
arrival_bus = arrival_bus %>%
group_by(trip_id) %>%
arrange(trip_id, act_arrival_time) %>%
mutate(diff_stop_sequence = stop_sequence - lag(stop_sequence))
# There are cases when the difference in stop_sequence is 0. If this is the case we have problems
any(arrival_bus$diff_stop_sequence <= 0)
getLessData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data < 0) return(TRUE)
else return(FALSE)
}
}
getEqualData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data == 0) return(TRUE)
else return(FALSE)
}
}
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
# Remove observations which are after another one.
cleaned_problem = subset(cleaned_problem, diff_stop_sequence >= 0)
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
problem_equal = subset(arrival_bus, trip_id %in% pe) %>% select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# Check for anamolies
# Cases when there's only one observation
unique(subset(problem_equal, delay < -1000)$trip_id)
subset(problem_equal, trip_id == unique(subset(problem_equal, delay < -1000)$trip_id)[13])
subset(problem_equal, trip_id == unique(trip_id)[21])
subset(problem_equal, trip_id == unique(trip_id)[22])
problem_equal
problem_equal
cleaned_equal = subset(problem_equal, diff_stop_sequence != 0)
cleaned_equal
subset(cleaned_equal, trip_id == unique(trip_id)[1])
subset(cleaned_equal, trip_id == unique(trip_id)[2])
subset(cleaned_equal, trip_id == unique(trip_id)[3])
subset(cleaned_equal, trip_id == unique(trip_id)[4])
subset(cleaned_equal, trip_id == unique(trip_id)[5])
any(cleaned_problem$diff_stop_sequence == 0)
any(cleaned_problem$diff_stop_sequence < 0)
cleaned_equal
problem_equal = subset(arrival_bus, trip_id %in% pe)
problem_equal
cleaned_equal = subset(problem_equal, diff_stop_sequence != 0)
cleaned_equal
any(cleaned_equal$diff_stop_sequence < 0)
any(cleaned_equal$diff_stop_sequence <= 0)
rbind(cleaned_equal, cleaned_problem)
cleaned_data = rbind(cleaned_equal, cleaned_problem)
cleaned_data
# Take the trip_id of the cleaned data, we want to ignore these now.
unique(cleaned_data$trip_id)
# Take the trip_id of the cleaned data, we want to ignore these now.
cleaned_ids = unique(cleaned_data$trip_id)
arrival_bus
unique(arrival_bus$trip_id) %in% cleaned_ids
# Take the trip_id of the cleaned data, we want to ignore these now.
cleaned_ids = unique(cleaned_data$trip_id)
other_ids = unique(arrival_bus$trip_id)[unique(arrival_bus$trip_id) %in% cleaned_ids]
other_ids
cleaned_ids
other_ids
valid_data = subset(arrival_bus, trip_id %in% other_ids)
valid_data
sapply(valid_data$diff_stop_sequence, getLessData)
any(sapply(valid_data$diff_stop_sequence, getLessData))
other_ids = unique(arrival_bus$trip_id)[!unique(arrival_bus$trip_id) %in% cleaned_ids]
valid_data = subset(arrival_bus, trip_id %in% other_ids)
valid_data
valid_data[sapply(valid_data$diff_stop_sequence, getLessData), ]
cleaned_ids
other_ids
unique(valid_data[sapply(valid_data$diff_stop_sequence, getLessData), ]$trip_id)
arrival_bus[arrival_bus$trip_id == "1396-03804-65700-2-0d38d8a7",]
problem_id
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
# Remove observations which are after another one.
cleaned_problem = subset(cleaned_problem, diff_stop_sequence >= 0)
cleaned_problem
unique(cleaned_problem$trip_id)
# The way to fix this issue is going to remove all the observations after the FIRST one
# Essentially just remove the 0's
cleaned_equal = subset(problem_equal, diff_stop_sequence != 0)
# Take the cleaned equal ids and the problem set ids and combine together!
cleaned_data = rbind(cleaned_equal, cleaned_problem)
# Take the trip_id of the cleaned data, we want to ignore these now.
cleaned_ids = unique(cleaned_data$trip_id)
other_ids = unique(arrival_bus$trip_id)[!unique(arrival_bus$trip_id) %in% cleaned_ids]
# Double checkign for any ideas that might have leaked through
valid_data = subset(arrival_bus, trip_id %in% other_ids)
unique(valid_data[sapply(valid_data$diff_stop_sequence, getLessData), ]$trip_id)
arrival_bus[arrival_bus$trip_id == "1396-03804-65700-2-0d38d8a7",]
unique(valid_data[sapply(valid_data$diff_stop_sequence, getLessData), ]$trip_id)
cleaned_problem
unique(cleaned_problem$trip_id)
problem_id
arrival_bus[arrival_bus$trip_id == "1396-03804-65700-2-0d38d8a7",]
unique(problem_set$trip_id)
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
unique(problem_set$trip_id)
unique(cleaned_problem$trip_id)
# Remove observations which are after another one.
cleaned_problem = subset(cleaned_problem, diff_stop_sequence >= 0)
unique(cleaned_problem$trip_id)
arrival_bus[arrival_bus$trip_id == "1396-03804-65700-2-0d38d8a7",]
arrival_bus[arrival_bus$trip_id == "1396-03804-65700-2-0d38d8a7",]$diff_stop_sequence
arrival_bus[arrival_bus$trip_id == "1396-03804-65700-2-0d38d8a7",]$diff_stop_sequence >= 0
# Remove observations which are after another one.
cleaned_problem = cleaned_problem[cleaned_problem$diff_stop_sequence >= 0,]
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
# Remove observations which are after another one.
cleaned_problem = cleaned_problem[cleaned_problem$diff_stop_sequence >= 0,]
cleaned_problem
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
cleaned_problem
cleaned_problem$diff_stop_sequence
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
# Remove observations which are after another one.
cleaned_problem = cleaned_problem[is.na(cleaned_problem$diff_stop_sequence) | cleaned_problem$diff_stop_sequence >= 0, ]
cleaned_problem
View(cleaned_problem)
source('businfoextraction.R')
t = full_bus_data
# We have complete cases
any(rowSums(is.na(full_bus_data)) == length(colnames(full_bus_data)))
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
# Get the cancelled buses
cancelled_bus = full_bus_data[full_bus_data$cancelled == TRUE, ]
# Get the unqiue IDS
ids = unique(cancelled_bus$trip_id)
cancelled_trips = trips[trips$trip_id %in% ids,]
cancelled_trips = cancelled_trips %>% select(route_id, trip_id, shape_id)
cancelled_trips = left_join(cancelled_trips, stop_times %>% select(trip_id, departure_time, stop_sequence, stop_id), by = c("trip_id"))
cancelled_trips = left_join(cancelled_trips, stops %>% select(stop_id, stop_lat, stop_lon), by = c("stop_id"))
cancelled_trips = left_join(cancelled_trips, routes %>% select(route_id, route_short_name), by = c("route_id"))
# Subsetted trips
cancelled_trips = subset(cancelled_trips, departure_time < "24:00:00")
# Converting the timestamps into seconds
# Paste the required date
cancelled_trips$timestamps = paste(date_,cancelled_trips$departure_time)
# Convert the time to UTC
cancelled_trips$timestamps = ymd_hms(cancelled_trips$timestamps, tz = "UTC")
cancelled_trips$timestamps = as.numeric(cancelled_trips$timestamps)
# Then add 12 hours since for some reason it's 12 hours behind
cancelled_trips$timestamps = cancelled_trips$timestamps  + 12*3600
# Now dealing with the non cancelled trips
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
arrival_bus = subset(full_bus_data, day == our_day)
arrival_bus = arrival_bus[arrival_bus$cancelled == FALSE, ]
# Remove duplicates that have same group and arrival date
arrival_bus <- arrival_bus %>%
group_by(trip_id, stop_sequence) %>%
filter(act_arrival_time_date == max(act_arrival_time_date)) %>%
ungroup()
# Get only buses that are after 4 am
arrival_bus = subset(arrival_bus, as.numeric(format(act_arrival_time_date, "%H")) >= 4)
# Want to group our observations by the actual arrival time and the trip_id
arrival_bus = arrival_bus %>%
group_by(trip_id) %>%
arrange(trip_id, act_arrival_time) %>%
mutate(diff_stop_sequence = stop_sequence - lag(stop_sequence))
# There are cases when the difference in stop_sequence is 0. If this is the case we have problems
any(arrival_bus$diff_stop_sequence <= 0)
getLessData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data < 0) return(TRUE)
else return(FALSE)
}
}
getEqualData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data == 0) return(TRUE)
else return(FALSE)
}
}
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
# Remove observations which stop_sequence is after another.
cleaned_problem = cleaned_problem[is.na(cleaned_problem$diff_stop_sequence) | cleaned_problem$diff_stop_sequence >= 0, ]
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
#problem_equal = subset(arrival_bus, trip_id %in% pe) %>%
#  select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
problem_equal = subset(arrival_bus, trip_id %in% pe)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# The way to fix this issue is going to remove all the observations after the FIRST one
# Essentially just remove the 0's
cleaned_equal = cleaned_equal[is.na(cleaned_equal$diff_stop_sequence) | cleaned_equal$diff_stop_sequence != 0, ]
cleaned_data = rbind(cleaned_equal, cleaned_problem)
# Take the trip_id of the cleaned data, we want to ignore these now.
cleaned_ids = unique(cleaned_data$trip_id)
other_ids = unique(arrival_bus$trip_id)[!unique(arrival_bus$trip_id) %in% cleaned_ids]
# Double checkign for any ideas that might have leaked through
valid_data = subset(arrival_bus, trip_id %in% other_ids)
unique(valid_data[sapply(valid_data$diff_stop_sequence, getLessData), ]$trip_id)
# We see that this should be 0. As there should be any
unique(valid_data[sapply(valid_data$diff_stop_sequence, getEqualData), ]$trip_id)
unique(valid_data[sapply(valid_data$diff_stop_sequence, getEqualData), ]$trip_id)
arrival_bus[arrival_bus$trip_id == "1044-55542-59400-2-0be74198",]
arrival_bus[arrival_bus$trip_id == "1314-80501-51300-2-974ff1fb",]
arrival_bus[arrival_bus$trip_id == "1314-80501-51300-2-974ff1fb",]$diff_stop_sequence
arrival_bus[arrival_bus$trip_id == "1395-27002-85500-2-a27d3190",]$diff_stop_sequence
arrival_bus[arrival_bus$trip_id == "1395-27002-85500-2-a27d3190",]
a = arrival_bus[arrival_bus$trip_id == "1395-27002-85500-2-a27d3190",]
a
a[is.na(a$diff_stop_sequence) | a$diff_stop_sequence != 0,]
sapply(valid_data$diff_stop_sequence, getEqualData)
problem_equal
unique(subset(problem_equal, delay > 3000)$trip_id)
problem_equal
cleaned_equal = cleaned_equal[is.na(cleaned_equal$diff_stop_sequence) | cleaned_equal$diff_stop_sequence != 0, ]
source('businfoextraction.R')
t = full_bus_data
# We have complete cases
any(rowSums(is.na(full_bus_data)) == length(colnames(full_bus_data)))
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
# Get the cancelled buses
cancelled_bus = full_bus_data[full_bus_data$cancelled == TRUE, ]
# Get the unqiue IDS
ids = unique(cancelled_bus$trip_id)
cancelled_trips = trips[trips$trip_id %in% ids,]
cancelled_trips = cancelled_trips %>% select(route_id, trip_id, shape_id)
cancelled_trips = left_join(cancelled_trips, stop_times %>% select(trip_id, departure_time, stop_sequence, stop_id), by = c("trip_id"))
cancelled_trips = left_join(cancelled_trips, stops %>% select(stop_id, stop_lat, stop_lon), by = c("stop_id"))
cancelled_trips = left_join(cancelled_trips, routes %>% select(route_id, route_short_name), by = c("route_id"))
# Subsetted trips
cancelled_trips = subset(cancelled_trips, departure_time < "24:00:00")
# Converting the timestamps into seconds
# Paste the required date
cancelled_trips$timestamps = paste(date_,cancelled_trips$departure_time)
# Convert the time to UTC
cancelled_trips$timestamps = ymd_hms(cancelled_trips$timestamps, tz = "UTC")
cancelled_trips$timestamps = as.numeric(cancelled_trips$timestamps)
# Then add 12 hours since for some reason it's 12 hours behind
cancelled_trips$timestamps = cancelled_trips$timestamps  + 12*3600
# Now dealing with the non cancelled trips
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
arrival_bus = subset(full_bus_data, day == our_day)
arrival_bus = arrival_bus[arrival_bus$cancelled == FALSE, ]
# Remove duplicates that have same group and arrival date
arrival_bus <- arrival_bus %>%
group_by(trip_id, stop_sequence) %>%
filter(act_arrival_time_date == max(act_arrival_time_date)) %>%
ungroup()
# Get only buses that are after 4 am
arrival_bus = subset(arrival_bus, as.numeric(format(act_arrival_time_date, "%H")) >= 4)
# Want to group our observations by the actual arrival time and the trip_id
arrival_bus = arrival_bus %>%
group_by(trip_id) %>%
arrange(trip_id, act_arrival_time) %>%
mutate(diff_stop_sequence = stop_sequence - lag(stop_sequence))
# There are cases when the difference in stop_sequence is 0. If this is the case we have problems
any(arrival_bus$diff_stop_sequence <= 0)
getLessData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data < 0) return(TRUE)
else return(FALSE)
}
}
getEqualData = function(data) {
if(is.na(data)) {
return(FALSE)
} else {
if (data == 0) return(TRUE)
else return(FALSE)
}
}
# Extract the problem data
problem_data = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getLessData), ]
problem_id = unique(problem_data$trip_id)
problem_set = subset(arrival_bus, trip_id %in% problem_id)
# Clean the problem dataset - ask Thomas should I even clean this like what I have done before!
cleaned_problem = subset(problem_set, delay > - 1700 & delay < 3200)
# Remove observations which stop_sequence is after another.
cleaned_problem = cleaned_problem[is.na(cleaned_problem$diff_stop_sequence) | cleaned_problem$diff_stop_sequence >= 0, ]
# Get the problem data when there are sequences that are the same
pe = arrival_bus[sapply(arrival_bus$diff_stop_sequence, getEqualData), ]$trip_id
#problem_equal = subset(arrival_bus, trip_id %in% pe) %>%
#  select(trip_id, delay, act_arrival_time_date,stop_sequence, diff_stop_sequence)
problem_equal = subset(arrival_bus, trip_id %in% pe)
# Check for anamolies
unique(subset(problem_equal, delay > 3000)$trip_id)
hist(problem_equal$delay)
# The way to fix this issue is going to remove all the observations after the FIRST one
# Essentially just remove the 0's
cleaned_equal = problem_equal[is.na(problem_equal$diff_stop_sequence) | problem_equal$diff_stop_sequence != 0, ]
# Take the cleaned equal ids and the problem set ids and combine together!
cleaned_data = rbind(cleaned_equal, cleaned_problem)
# Take the trip_id of the cleaned data, we want to ignore these now.
cleaned_ids = unique(cleaned_data$trip_id)
other_ids = unique(arrival_bus$trip_id)[!unique(arrival_bus$trip_id) %in% cleaned_ids]
# Double checkign for any ideas that might have leaked through
valid_data = subset(arrival_bus, trip_id %in% other_ids)
# We see that this should be 0. As there should be any
unique(valid_data[sapply(valid_data$diff_stop_sequence, getLessData), ]$trip_id)
unique(valid_data[sapply(valid_data$diff_stop_sequence, getEqualData), ]$trip_id)
any(unique(cleaned_ids) %in% other_ids)
any(unique(cleaned_ids) %in% pe)
cleaned_ids[any(unique(cleaned_ids) %in% pe),]
cleaned_ids
any(problem_id %in% pe)
any(pe %in% problem_id)
valid_data
cancelled_trips
cancelled_trips
source('businfoextraction.R')
t = full_bus_data
# We have complete cases
any(rowSums(is.na(full_bus_data)) == length(colnames(full_bus_data)))
# Get the day make sure it matches
day <- format(full_bus_data$act_arrival_time_date, "%d")
# Get the day here we are working the 5th
our_day = "05"
# Get the cancelled buses
cancelled_bus = full_bus_data[full_bus_data$cancelled == TRUE, ]
# Get the unqiue IDS
ids = unique(cancelled_bus$trip_id)
cancelled_trips = trips[trips$trip_id %in% ids,]
cancelled_trips = cancelled_trips %>% select(route_id, trip_id, shape_id)
cancelled_trips = left_join(cancelled_trips, stop_times %>% select(trip_id, departure_time, stop_sequence, stop_id), by = c("trip_id"))
cancelled_trips = left_join(cancelled_trips, stops %>% select(stop_id, stop_lat, stop_lon), by = c("stop_id"))
cancelled_trips = left_join(cancelled_trips, routes %>% select(route_id, route_short_name), by = c("route_id"))
# Subsetted trips
cancelled_trips = subset(cancelled_trips, departure_time < "24:00:00")
timestamp_conversion = function(x) {
timestamps = paste(date_,x$departure_time)
timestamps = ymd_hms(timestamps, tz = "UTC")
timestamps = as.numeric(timestamps)
timestamps = timestamps  + 12*3600
}
# Converting the timestamps into seconds
# Paste the required date
cancelled_trips$timestamps = timestamp_conversion(cancelled_trips)
cancelled_trips$timestamps
cancelled_trips
valid_data
cleaned_data
rbind(cleaned_data, valid_data)
non_cancelled_trips = rbind(cleaned_data, valid_data)
non_cancelled_trips
non_cancelled_trips
cancelled_trips
non_cancelled_trips$timestamps = timestamp_conversion(non_cancelled_trips)
non_cancelled_trips
timestamp_conversion = function(x) {
timestamps = paste(date_,x)
timestamps = ymd_hms(timestamps, tz = "UTC")
timestamps = as.numeric(timestamps)
timestamps = timestamps  + 12*3600
}
# Converting the timestamps into seconds
# Paste the required date
cancelled_trips$timestamps = timestamp_conversion(cancelled_trips$departure_time)
non_cancelled_trips = rbind(cleaned_data, valid_data)
non_cancelled_trips
View(non_cancelled_trips)
cancelled_trips
cancelled_trips$status = 0
non_cancelled_trips
non_cancelled_trips %>% select(trip_id, shape_id, act_arrival_time_date, status, stop_lat, stop_lon, route_id, route_short_name)
cancelled_trips
non_cancelled_trips %>% select(trip_id, shape_id, act_arrival_time_date, status, stop_lat, stop_lon, route_id, route_short_name)
cancelled_trips %>% select(trip_id, shape_id, timestamps, status, stop_lat, stop_lon, route_id, route_short_name)
non_cancelled_trips
sum(is.na(non_cancelled_trips$shape_id))
non_cancelled_trips$shape_id
# For places that don't have a shape_id nor lats or lon, we can get them.
shapes
trips
shapes
stop_times
non_cancelled_trips
non_cancelled_trips[is.na(non_cancelled_trips$shape_id),]
# For places that don't have a shape_id nor lats or lon, we can get them.
left_join(non_cancelled_trips, by = c("trip_id", "stop_id", "stop_sequence"))
# For places that don't have a shape_id nor lats or lon, we can get them.
left_join(non_cancelled_trips, stop_times, by = c("trip_id", "stop_id", "stop_sequence"))
non_cancelled_trips
cancelled_trips
any(is.na(cancelled_trips$shape_id))
full_bus_data[full_bus_data$cancelled == TRUE, ]
# For non-cancelled trips we need to get the dataset
non_cancelled_trips = rbind(cleaned_data, valid_data)
# For places that don't have a shape_id nor lats or lon, we can get them.
non_cancelled_trips = left_join(non_cancelled_trips, stop_times, by = c("trip_id", "stop_id", "stop_sequence"))
non_cancelled_trips = left_join(non_cancelled_trips, shapes %>% select(trip_id, shape_id), by = c("trip_id"))
shapes
trips
# For non-cancelled trips we need to get the dataset
non_cancelled_trips = rbind(cleaned_data, valid_data)
# For places that don't have a shape_id nor lats or lon, we can get them.
non_cancelled_trips = left_join(non_cancelled_trips, stop_times, by = c("trip_id", "stop_id", "stop_sequence"))
non_cancelled_trips = left_join(non_cancelled_trips, trips %>% select(trip_id, shape_id), by = c("trip_id"))
non_cancelled_trips
any(is.na(non_cancelled_trips$shape_id.y))
non_cancelled_trips[is.na(non_cancelled_trips$shape_id.y),]
non_cancelled_trips[is.na(non_cancelled_trips$shape_id.y),]$route_short_name
unique(non_cancelled_trips[is.na(non_cancelled_trips$shape_id.y),]$route_short_name)
trips
routes
subset(routes, route_short_name == "70")
